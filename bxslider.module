<?php

/**
 * @file
 * BxSlider integration.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function bxslider_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the bxslider module.
    case 'help.page.bxslider':
      $output = '';
      $output .= '<h3>' . t('About BxSlider') . '</h3>';
      $output .= '<p>' . t('Integration BxSlider with Field Formaters.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function bxslider_theme($existing, $type, $theme, $path) {
  return [
    'bxslider' => [
      'variables' => [
        'items' => [],
        'settings' => [],
      ],
      'template' => 'bxslider',
    ],
    'bxslider_ths' => [
      'variables' => [
        'items' => [],
        'thumbnail_items' => [],
        'settings' => [],
      ],
      'template' => 'bxslider-thumbnail',
    ],
    'bxslider_colorbox' => [
      'variables' => [
        'slide_item' => [],
        'settings' => [],
      ],
      'template' => 'bxslider-colorbox',
    ],
  ];
}

/**
 * Preprocess function.
 */
function template_preprocess_bxslider(&$variables) {
  foreach ($variables['items'] as $key => $item) {

    if(!empty($variables['settings']['image_style'])) {
      $variables['slides'][$key]['image'] = [
        '#theme' => 'image_style',
        '#style_name' => $variables['settings']['image_style'],
      ];
    }
    else {
      $variables['slides'][$key]['image'] = [
        '#theme' => 'image',
      ];
    }

    if (($entity = $item->entity) && empty($item->uri)) {
      $variables['slides'][$key]['image']['#uri'] = $entity->getFileUri();
    }
    else {
      $variables['slides'][$key]['image']['#uri'] = $item->uri;
    }

    // If using Colorbox.
    if ($variables['settings']['colorbox']['enable']) {
      // Used for combination of elements together for a gallery.
//      $slide_item['item']['rel'] = $field["id"];

      $variables['slides'][$key]['image'] = [
        '#theme' => 'bxslider_colorbox',
        '#slide_item' => $variables['slides'][$key]['image'],
        '#settings' => $variables['settings'],
      ];
    }

  }
}

/**
 * Preprocess function.
 */
function template_preprocess_bxslider_ths(&$variables) {
  foreach ($variables['items'] as $key => $item) {

    if(!empty($variables['settings']['image_style'])) {
      $variables['slides'][$key]['image'] = [
        '#theme' => 'image_style',
        '#style_name' => $variables['settings']['image_style'],
      ];
    }
    else {
      $variables['slides'][$key]['image'] = [
        '#theme' => 'image',
      ];
    }

    if (($entity = $item->entity) && empty($item->uri)) {
      $variables['slides'][$key]['image']['#uri'] = $entity->getFileUri();
    }
    else {
      $variables['slides'][$key]['image']['#uri'] = $item->uri;
    }
  }

  foreach ($variables['thumbnail_items'] as $key => $item) {

    if(!empty($variables['settings']['thumbnail_slider']['thumbnail_style'])) {
      $variables['thumbnails'][$key]['image'] = [
        '#theme' => 'image_style',
        '#style_name' => $variables['settings']['thumbnail_slider']['thumbnail_style'],
      ];
    }
    else {
      $variables['thumbnails'][$key]['image'] = [
        '#theme' => 'image',
      ];
    }

    if (($entity = $item->entity) && empty($item->uri)) {
      $variables['thumbnails'][$key]['image']['#uri'] = $entity->getFileUri();
    }
    else {
      $variables['thumbnails'][$key]['image']['#uri'] = $item->uri;
    }
  }

}

/**
 * Preprocess function.
 */
function template_preprocess_bxslider_colorbox(&$variables) {

  if ($variables['settings']['colorbox']['enable']) {
    if (!empty($variables['settings']['colorbox']['image_style'])) {
      $style = Drupal\image\Entity\ImageStyle::load($variables['settings']['colorbox']['image_style']);
      $colorbox_style_path = $style->buildUrl($variables['slide_item']['#uri']);
      $style->createDerivative($variables['slide_item']['#uri'], $colorbox_style_path);
    }
    else {
      // Original image.
      $colorbox_style_path = $variables['slide_item']['#uri'];
    }

    $variables['attributes'] = array(
      'class' => 'colorbox-load',
      // Used for combination of elements together for a gallery.
      'rel' => 'bx-' . $variables['slide_item']['item']['rel'],
    );

    // Check first that the file is an image.
    $image_factory = \Drupal::service('image.factory');
    $image = $image_factory->get($variables['slide_item']['#uri']);
    if ($image->isValid()) {
      $width = $image->getWidth();
      $height = $image->getHeight();
    }

    $options = array(
      'width' => $width,
      'height' => $height,
    );
    if (isset($variables['settings']['colorbox']['slideshow']) && $variables['settings']['colorbox']['slideshow']) {
      $options["slideshow"] = "true";
      $options["slideshowAuto"] = $variables['settings']['colorbox']['slideshow'] == 'automatic' ? 'true' : 'false';
      $options["slideshowSpeed"] = $variables['settings']['colorbox']['slideshow_speed'];
      $options["transition"] = $variables['settings']['colorbox']['transition'];
      $options["speed"] = $variables['settings']['colorbox']['transition_speed'];
    }

    $variables['url'] = \Drupal\Core\Url::fromUri(file_create_url($colorbox_style_path), ['query' => $options]);

    // Attach library.
    $variables['#attached']['library'][] = 'colorbox/colorbox';
  }
}